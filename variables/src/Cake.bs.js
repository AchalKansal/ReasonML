// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function toString(size) {
  if (typeof size === "number") {
    switch (size) {
      case /* Full */0 :
          return "full sheet";
      case /* Half */1 :
          return "half sheet";
      case /* Quarter */2 :
          return "quarter sheet";
      
    }
  } else {
    return "custom " + (size[0].toString() + (" by" + size[1].toString()));
  }
}

function fromString(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "full" :
        return /* Full */0;
    case "half" :
        return /* Half */1;
    case "quarter" :
        return /* Quarter */2;
    default:
      return ;
  }
}

var Size = {
  toString: toString,
  fromString: fromString
};

function toString$1(flavor) {
  switch (flavor) {
    case /* White */0 :
        return "white";
    case /* Yellow */1 :
        return "yellow";
    case /* Chocolate */2 :
        return "chocolate";
    
  }
}

function fromString$1(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "chocolate" :
        return /* Chocolate */2;
    case "white" :
        return /* White */0;
    case "yellow" :
        return /* Yellow */1;
    default:
      return ;
  }
}

var Flavor = {
  toString: toString$1,
  fromString: fromString$1
};

function toString$2(frosting) {
  if (frosting) {
    return "chocolate";
  } else {
    return "vanilla";
  }
}

function fromString$2(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "chocolate" :
        return /* Chocolate */1;
    case "vanilla" :
        return /* Vanilla */0;
    default:
      return ;
  }
}

var Frosting = {
  toString: toString$2,
  fromString: fromString$2
};

function toString$3(filling) {
  switch (filling) {
    case /* Vanilla */0 :
        return "vanilla";
    case /* Chocolate */1 :
        return "chocolate";
    case /* Raspberry */2 :
        return "raspberry";
    case /* Lemon */3 :
        return "lemon";
    case /* Strawberry */4 :
        return "strawberry";
    
  }
}

function fromString$3(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "chocolate" :
        return /* Chocolate */1;
    case "lemon" :
        return /* Lemon */3;
    case "raspberry" :
        return /* Raspberry */2;
    case "strawberry" :
        return /* Strawberry */4;
    case "vanilla" :
        return /* Vanilla */0;
    default:
      return ;
  }
}

var Filling = {
  toString: toString$3,
  fromString: fromString$3
};

function getBasePrice(cake) {
  var match = cake.size;
  var basePrice;
  if (typeof match === "number") {
    switch (match) {
      case /* Full */0 :
          basePrice = 65.00;
          break;
      case /* Half */1 :
          basePrice = 50.00;
          break;
      case /* Quarter */2 :
          basePrice = 40.00;
          break;
      
    }
  } else {
    basePrice = Caml_int32.imul(match[0], match[1]) * 0.15;
  }
  if (cake.layers > 1) {
    return basePrice * cake.layers * 2.20;
  } else {
    return basePrice;
  }
}

function cakeToString(cake) {
  return cake.layers.toString() + (" layer " + (toString(cake.size) + (" size " + toString$1(cake.flavor))));
}

exports.Size = Size;
exports.Flavor = Flavor;
exports.Frosting = Frosting;
exports.Filling = Filling;
exports.getBasePrice = getBasePrice;
exports.cakeToString = cakeToString;
/* No side effect */
